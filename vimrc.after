" vim:ft=vim

colorscheme Tomorrow-Night 

"color getafe
" Do not display uganda crap
set shortmess=aoOtTI

" Make terminal play nicely
set t_Co=256
set mouse+=a

set shiftround

set splitbelow
set splitright

set statusline=%<\ %{&ff}\ %{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%t\ %Y\ %n\ %m%r%h%w\ %{fugitive#statusline()}\ %=%03p%%\ [%04l,%04v]\ %L

"         _     _                    _       _   _
"    __ _| |__ | |__  _ __ _____   _(_) __ _| |_(_) ___  _ __  ___
"   / _` | '_ \| '_ \| '__/ _ \ \ / / |/ _` | __| |/ _ \| '_ \/ __|
"  | (_| | |_) | |_) | | |  __/\ V /| | (_| | |_| | (_) | | | \__ \
"   \__,_|_.__/|_.__/|_|  \___| \_/ |_|\__,_|\__|_|\___/|_| |_|___/


iabbrev lofd ಠ_ಠ
iabbrev mv/ http://vasiliev.me/
iabbrev widht width
iabbrev heihgt height
iabbrev heigth height
iabbrev flaot float
iabbrev marign margin

if has('gui_running')
  " Use the normal HIG movements, except for M-Up/Down
  let macvim_skip_cmd_opt_movement = 1
  no   <D-Left>       <Home>
  no!  <D-Left>       <Home>
  no   <M-Left>       <C-Left>
  no!  <M-Left>       <C-Left>

  no   <D-Right>      <End>
  no!  <D-Right>      <End>
  no   <M-Right>      <C-Right>
  no!  <M-Right>      <C-Right>

  no   <D-Up>         <C-Home>
  ino  <D-Up>         <C-Home>
  imap <M-Up>         <C-o>{

  no   <D-Down>       <C-End>
  ino  <D-Down>       <C-End>
  imap <M-Down>       <C-o>}

  vmap <bs> d

  imap <M-BS>         <C-w>
  " inoremap <D-BS>     <esc>my0c`y
  inoremap <D-BS>    <C-u>

  nmap <SwipeLeft> gT
  nmap <SwipeRight> gt

  nmap <SwipeLeft> :bN<CR>
  nmap <SwipeRight> :bn<CR>
endif

" Edit ~/.vimrc
map <leader>ed :e ~/.vimrc.after<CR>
" Reload ~/.vimrc
map <leader>rv :source ~/.vimrc.after<CR>
" Vertical split
map <leader>vsp :vsp<cr>
" Horizontal split
map <leader>sp :sp<CR>

" Fold/unfold block
imap <silent> <D-d> <Esc>za
vmap <silent> <D-d> za
nmap <silent> <D-d> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" Jump to next line
imap <D-Enter> <Esc>o
" Jump to previous line
imap <D-S-Enter> <Esc>O

" Switching buffers
map <S-D-Left> :bp<cr>
imap <S-D-Left> <ESC>:bp<cr>

map <S-D-Right> :bn<cr>
imap <S-D-Right> <ESC>:bn<cr>

map <leader>nt :NERDTreeToggle<CR>


fun! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

command! StripTrailingWhitespaces :call StripTrailingWhitespaces()

fun! Beautify()
  retab
  call StripTrailingWhitespaces()
endf

command! Beautify :call Beautify()


" Map cyrillic letters so they work in normal mode
map ё ´
map й j
map ц c
map у u
map к k
map е e
map н n
map г g
map ш w
map щ `
map з z
map х x
map ъ =
map ф f
map ы y
map в v
map а a
map п p
map р r
map о o
map л l
map д d
map ж ]
map э \
map я q
map ч h
map с s
map м m
map и i
map т t
map ь -
map б b
map ю [

map Ё ´
map Й J
map Ц C
map У U
map К K
map Е E
map Н N
map Г G
map Ш W
map Щ `
map З Z
map Х X
map Ъ =
map Ф F
map Ы Y
map В V
map А A
map П P
map Р R
map О O
map Л L
map Д D
map Ж ]
map Э \
map Я Q
map Ч H
map С S
map М M
map И I
map Т T
map Ь -
map Б B
map Ю [

" This one is pretty neat. Sorts css selectors alphabetically.
map <leader>ss ?{<CR>jV/^\s*\}\=$<CR>k:sort<CR>:let @/=''<CR>

nnoremap Y y$
nnoremap D d$


" Keep search matches in the middle of the window.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

" L is easier to type, and I never use the default behavior.
" noremap L $

" Open a Quickfix window for the last search
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Fix linewise visual selection of various text objects
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

" Yankring
nnoremap <silent> <F6> :YRShow<cr>

" Formatting, TextMate-style
nnoremap <leader>q gqip

" Easier linewise reselection
nnoremap <leader>v V`]

" Replaste
nnoremap <D-p> "_ddPV`]

" Fix make in macvim
if filereadable("Makefile")
  set makeprg=cd\ %:p:h\ &&\ make\ -j
elseif filereadable("Rakefile")
  set makeprg=rake
else
  set makeprg=make\ %:r
endif


if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:<CR>
  vmap <Leader>a: :Tabularize /:<CR>
  nmap <Leader>a:: :Tabularize /:\zs<CR>
  vmap <Leader>a:: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

  " The following function automatically aligns when typing a
  " supported character
  inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

  function! s:align()
      let p = '^\s*|\s.*\s|\s*$'
      if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
          let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
          let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
          Tabularize/|/l1
          normal! 0
          call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
      endif
  endfunction

endif

" VimWiki setup
let g:vimwiki_use_mouse  = 1
let g:vimwiki_folding    = 1
let g:vimwiki_fold_lists = 1
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_auto_checkbox = 1
let wiki = {}
let wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'C', 'ruby': 'Ruby', 'haml': 'Haml', 'css': 'css', 'asm': 'asm'}
let vimwiki_list = [wiki]
let g:vimwiki_hl_headers = 0
let g:vimwiki_camel_case = 0
let g:vimwiki_conceallevel = 0

map <leader>gt :GundoToggle<CR>




" Rainbows!
nmap <leader>R :RainbowParenthesesToggle<CR>

" HTML tag closing
inoremap <C-_> <Space><BS><Esc>:call InsertCloseTag()<cr>a

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

